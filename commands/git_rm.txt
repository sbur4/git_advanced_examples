1. Удаление файла из индекса и рабочего каталога:
git rm filename
Эта команда удалит указанный файл из индекса Git и из вашего рабочего каталога. После этого файл больше не будет отслеживаться Git.

2. Удаление файла из индекса, но оставление в рабочем каталоге:
git rm --cached filename
Эта команда удалит указанный файл только из индекса Git, оставляя его в вашем рабочем каталоге. Это полезно, если вы хотите перестать отслеживать файл, но оставить его в файловой системе.

3. Рекурсивное удаление директории:
git rm -r directoryname
С этой командой вы можете рекурсивно удалить указанную директорию и все ее содержимое из индекса и рабочего каталога.

4. Форсированное удаление:
git rm -f filename
Иногда Git может предупреждать вас о потере изменений при удалении файла. Добавление -f (или --force) игнорирует этот предупреждающий сигнал и производит удаление.

5. Удаление с изменением сообщения коммита:
git rm filename -- <message>
Этот вариант позволяет вам указать сообщение коммита, которое будет связано с удалением файла. Например, git rm file.txt -- "Удаление файла file.txt".

6. Удаление нескольких файлов сразу:
git rm file1.txt file2.txt
Вы можете удалять несколько файлов одновременно, перечислив их через пробел.

7. Интерактивное удаление:
git rm -i filename
Используя -i, вы можете войти в интерактивный режим для выборочного удаления файлов.

8. Удаление файлов по шаблону:
git rm "*.log"
Можно использовать метасимволы и шаблоны для удаления файлов, соответствующих определенным критериям.

9. Отмена удаления:
git restore --staged filename
Если вы случайно удалили файл с помощью git rm, вы можете вернуть его в индекс с помощью git restore --staged filename.

10. Просмотр изменений перед удалением:
git rm --dry-run filename
Эта команда позволяет просмотреть, какие файлы будут удалены без фактического выполнения операции.